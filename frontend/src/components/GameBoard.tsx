import { useState, useEffect } from 'react'\nimport { useAccount } from 'wagmi'\nimport { Game } from '../App'\nimport './GameBoard.css'\n\ninterface Soldier {\n  x: number\n  y: number\n  isAlive: boolean\n  isEncrypted: boolean\n  playerId: string\n  soldierIndex: number\n}\n\ninterface GameBoardProps {\n  game: Game\n  onBackToLobby: () => void\n}\n\nexport default function GameBoard({ game, onBackToLobby }: GameBoardProps) {\n  const { address } = useAccount()\n  const [soldiers, setSoldiers] = useState<Soldier[]>([])\n  const [selectedSoldier, setSelectedSoldier] = useState<Soldier | null>(null)\n  const [gamePhase, setGamePhase] = useState<'setup' | 'playing'>('setup')\n  const [setupPositions, setSetupPositions] = useState<{x: number, y: number}[]>([])\n  \n  const isDefender = address === game.defender\n  const isAttacker = address === game.attacker\n  const isCurrentPlayer = address === game.currentPlayer\n  \n  // Game board is 9x9 (1-9 for both x and y)\n  const BOARD_SIZE = 9\n  \n  // Territory definitions\n  const DEFENDER_HOME = [1, 2, 3]\n  const NEUTRAL_ZONE = [4, 5, 6]\n  const ATTACKER_HOME = [7, 8, 9]\n  \n  useEffect(() => {\n    // Initialize game state\n    if (game.state === 1) { // InProgress\n      // Load existing soldiers from contract if any\n      loadSoldiers()\n    }\n  }, [game])\n  \n  const loadSoldiers = async () => {\n    // This would load soldiers from the contract\n    // For now, just initialize empty\n    setSoldiers([])\n  }\n  \n  const getTerritoryType = (y: number): 'defender' | 'neutral' | 'attacker' => {\n    if (DEFENDER_HOME.includes(y)) return 'defender'\n    if (ATTACKER_HOME.includes(y)) return 'attacker'\n    return 'neutral'\n  }\n  \n  const isInHomeTerritory = (x: number, y: number, playerType: 'defender' | 'attacker'): boolean => {\n    const territory = getTerritoryType(y)\n    return territory === playerType\n  }\n  \n  const getSoldierAt = (x: number, y: number): Soldier | null => {\n    return soldiers.find(soldier => \n      soldier.x === x && soldier.y === y && soldier.isAlive\n    ) || null\n  }\n  \n  const isValidMove = (fromX: number, fromY: number, toX: number, toY: number): boolean => {\n    const deltaX = Math.abs(toX - fromX)\n    const deltaY = Math.abs(toY - fromY)\n    \n    // Can move to adjacent squares (including diagonals)\n    return deltaX <= 1 && deltaY <= 1 && !(deltaX === 0 && deltaY === 0)\n  }\n  \n  const handleCellClick = (x: number, y: number) => {\n    if (gamePhase === 'setup') {\n      handleSetupClick(x, y)\n    } else {\n      handleGameClick(x, y)\n    }\n  }\n  \n  const handleSetupClick = (x: number, y: number) => {\n    // During setup, players place their 3 soldiers\n    if (setupPositions.length >= 3) return\n    \n    // Check if position is already taken\n    if (setupPositions.some(pos => pos.x === x && pos.y === y)) return\n    \n    // Check if position is valid for player\n    const playerType = isDefender ? 'defender' : 'attacker'\n    const validYRange = playerType === 'defender' ? [1, 2, 3, 4, 5, 6, 7, 8, 9] : [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    if (!validYRange.includes(y)) return\n    \n    const newPositions = [...setupPositions, { x, y }]\n    setSetupPositions(newPositions)\n    \n    if (newPositions.length === 3) {\n      // All soldiers placed, submit to contract\n      submitSoldierSetup(newPositions)\n    }\n  }\n  \n  const handleGameClick = (x: number, y: number) => {\n    if (!isCurrentPlayer) return\n    \n    const clickedSoldier = getSoldierAt(x, y)\n    \n    if (selectedSoldier) {\n      // Try to move selected soldier\n      if (clickedSoldier && clickedSoldier.playerId === address) {\n        // Clicked on own soldier, select it instead\n        setSelectedSoldier(clickedSoldier)\n      } else if (isValidMove(selectedSoldier.x, selectedSoldier.y, x, y)) {\n        // Valid move, execute it\n        moveSoldier(selectedSoldier, x, y)\n        setSelectedSoldier(null)\n      } else {\n        // Invalid move, deselect\n        setSelectedSoldier(null)\n      }\n    } else {\n      // No soldier selected, try to select one\n      if (clickedSoldier && clickedSoldier.playerId === address) {\n        setSelectedSoldier(clickedSoldier)\n      }\n    }\n  }\n  \n  const submitSoldierSetup = async (positions: {x: number, y: number}[]) => {\n    try {\n      // Call contract to initialize soldiers\n      const xPositions = positions.map(p => p.x)\n      const yPositions = positions.map(p => p.y)\n      \n      console.log('Setting up soldiers at:', positions)\n      // This would call the contract's initializeSoldiers function\n      // For now, just simulate locally\n      \n      const newSoldiers: Soldier[] = positions.map((pos, index) => ({\n        x: pos.x,\n        y: pos.y,\n        isAlive: true,\n        isEncrypted: isInHomeTerritory(pos.x, pos.y, isDefender ? 'defender' : 'attacker'),\n        playerId: address!,\n        soldierIndex: index\n      }))\n      \n      setSoldiers(prevSoldiers => [...prevSoldiers, ...newSoldiers])\n      setGamePhase('playing')\n    } catch (error) {\n      console.error('Error setting up soldiers:', error)\n    }\n  }\n  \n  const moveSoldier = async (soldier: Soldier, newX: number, newY: number) => {\n    try {\n      console.log(`Moving soldier from (${soldier.x}, ${soldier.y}) to (${newX}, ${newY})`)\n      \n      // Update soldier position locally\n      setSoldiers(prevSoldiers => \n        prevSoldiers.map(s => \n          s === soldier \n            ? { \n                ...s, \n                x: newX, \n                y: newY,\n                isEncrypted: isInHomeTerritory(newX, newY, isDefender ? 'defender' : 'attacker')\n              }\n            : s\n        )\n      )\n      \n      // This would call the contract move function\n    } catch (error) {\n      console.error('Error moving soldier:', error)\n    }\n  }\n  \n  const resetSetup = () => {\n    setSetupPositions([])\n  }\n  \n  const renderCell = (x: number, y: number) => {\n    const territory = getTerritoryType(y)\n    const soldier = getSoldierAt(x, y)\n    const isSetupPosition = setupPositions.some(pos => pos.x === x && pos.y === y)\n    const isSelected = selectedSoldier?.x === x && selectedSoldier?.y === y\n    const canMoveTo = selectedSoldier && isValidMove(selectedSoldier.x, selectedSoldier.y, x, y) && !soldier\n    \n    let cellClass = `cell ${territory}`\n    if (isSelected) cellClass += ' selected'\n    if (canMoveTo) cellClass += ' can-move'\n    if (isSetupPosition) cellClass += ' setup-position'\n    \n    return (\n      <div\n        key={`${x}-${y}`}\n        className={cellClass}\n        onClick={() => handleCellClick(x, y)}\n        title={`(${x}, ${y}) - ${territory} territory`}\n      >\n        <div className=\"cell-coordinate\">{x},{y}</div>\n        {soldier && (\n          <div className={`soldier ${soldier.playerId === game.defender ? 'defender-soldier' : 'attacker-soldier'}`}>\n            {soldier.isEncrypted ? 'üîí' : (soldier.playerId === game.defender ? 'üõ°Ô∏è' : '‚öîÔ∏è')}\n          </div>\n        )}\n        {isSetupPosition && <div className=\"setup-marker\">üìç</div>}\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"game-board-container\">\n      <div className=\"game-header\">\n        <h2>FogWar Game #{game.gameId}</h2>\n        <button onClick={onBackToLobby} className=\"back-btn\">‚Üê Back to Lobby</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"players\">\n          <div className={`player ${isDefender ? 'current-user' : ''}`}>\n            üõ°Ô∏è Defender: {game.defender.slice(0, 6)}...{game.defender.slice(-4)}\n          </div>\n          <div className={`player ${isAttacker ? 'current-user' : ''}`}>\n            ‚öîÔ∏è Attacker: {game.attacker === '0x0000000000000000000000000000000000000000' \n              ? 'Waiting...' \n              : `${game.attacker.slice(0, 6)}...${game.attacker.slice(-4)}`\n            }\n          </div>\n        </div>\n        \n        {gamePhase === 'setup' && (\n          <div className=\"setup-info\">\n            <h3>Setup Phase</h3>\n            <p>Place your 3 soldiers on the board ({setupPositions.length}/3)</p>\n            {setupPositions.length > 0 && (\n              <button onClick={resetSetup} className=\"reset-btn\">Reset Positions</button>\n            )}\n          </div>\n        )}\n        \n        {gamePhase === 'playing' && (\n          <div className=\"game-status\">\n            <p>\n              Current Turn: {game.currentPlayer === game.defender ? 'üõ°Ô∏è Defender' : '‚öîÔ∏è Attacker'}\n              {isCurrentPlayer && ' (Your turn)'}\n            </p>\n            {selectedSoldier && (\n              <p>Selected: Soldier at ({selectedSoldier.x}, {selectedSoldier.y})</p>\n            )}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"board\">\n        <div className=\"row-labels\">\n          {Array.from({length: BOARD_SIZE}, (_, i) => BOARD_SIZE - i).map(y => (\n            <div key={y} className=\"row-label\">{y}</div>\n          ))}\n        </div>\n        \n        <div className=\"board-grid\">\n          <div className=\"col-labels\">\n            {Array.from({length: BOARD_SIZE}, (_, i) => i + 1).map(x => (\n              <div key={x} className=\"col-label\">{x}</div>\n            ))}\n          </div>\n          \n          <div className=\"grid\">\n            {Array.from({length: BOARD_SIZE}, (_, rowIndex) => {\n              const y = BOARD_SIZE - rowIndex // Reverse y-axis so y=9 is at top\n              return (\n                <div key={y} className=\"row\">\n                  {Array.from({length: BOARD_SIZE}, (_, colIndex) => {\n                    const x = colIndex + 1\n                    return renderCell(x, y)\n                  })}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"legend\">\n        <h4>Legend:</h4>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color defender\"></div>\n            <span>Defender Home (Rows 1-3)</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color neutral\"></div>\n            <span>Neutral Zone (Rows 4-6)</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color attacker\"></div>\n            <span>Attacker Home (Rows 7-9)</span>\n          </div>\n          <div className=\"legend-item\">\n            <span>üîí Encrypted soldier</span>\n          </div>\n          <div className=\"legend-item\">\n            <span>üõ°Ô∏è Defender soldier</span>\n          </div>\n          <div className=\"legend-item\">\n            <span>‚öîÔ∏è Attacker soldier</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
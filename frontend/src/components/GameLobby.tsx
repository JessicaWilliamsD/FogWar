import { useState, useEffect } from 'react'\nimport { useAccount } from 'wagmi'\nimport { Game } from '../App'\nimport { useFogWarGame } from '../hooks/useFogWarGame'\nimport { GameState, FOGWAR_CONTRACT_ADDRESS } from '../lib/contract'\nimport './GameLobby.css'\n\ninterface GameLobbyProps {\n  onGameStarted: (game: Game) => void\n}\n\nexport default function GameLobby({ onGameStarted }: GameLobbyProps) {\n  const { address } = useAccount()\n  const [joinGameId, setJoinGameId] = useState('')\n  const [availableGames, setAvailableGames] = useState<Game[]>([])\n  \n  const {\n    currentGame,\n    isLoading,\n    error,\n    gameCounter,\n    isCreatingGame,\n    isJoiningGame,\n    createGame,\n    joinGame,\n    loadAvailableGames,\n  } = useFogWarGame()\n  \n  // Check if contract is properly configured\n  const isContractConfigured = FOGWAR_CONTRACT_ADDRESS !== '0x0000000000000000000000000000000000000000'\n\n  useEffect(() => {\n    if (currentGame && currentGame.state === GameState.InProgress) {\n      onGameStarted(currentGame)\n    }\n  }, [currentGame, onGameStarted])\n\n  const handleCreateGame = async () => {\n    if (!isContractConfigured) {\n      alert('Contract not configured. Please deploy the FogWar contract and set the address in the environment variables.')\n      return\n    }\n    await createGame()\n  }\n\n  const handleJoinGame = async () => {\n    if (!joinGameId) return\n    if (!isContractConfigured) {\n      alert('Contract not configured. Please deploy the FogWar contract and set the address in the environment variables.')\n      return\n    }\n    await joinGame(parseInt(joinGameId))\n  }\n\n  const handleLoadGames = async () => {\n    if (!isContractConfigured) {\n      alert('Contract not configured. Please deploy the FogWar contract and set the address in the environment variables.')\n      return\n    }\n    try {\n      const games = await loadAvailableGames()\n      setAvailableGames(games)\n    } catch (err) {\n      console.error('Error loading games:', err)\n    }\n  }\n\n  return (\n    <div className=\"game-lobby\">\n      <h2>Game Lobby</h2>\n      \n      {!isContractConfigured && (\n        <div className=\"contract-warning\">\n          <h3>‚ö†Ô∏è Contract Not Configured</h3>\n          <p>To use this application, you need to:</p>\n          <ol>\n            <li>Deploy the FogWar contract to Sepolia testnet</li>\n            <li>Set the contract address in your environment variables</li>\n            <li>Ensure you have Sepolia ETH for transactions</li>\n          </ol>\n          <p>For development, you can run: <code>npm run deploy:sepolia</code> in the root directory.</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"error-message\">\n          <h4>Error</h4>\n          <p>{error}</p>\n        </div>\n      )}\n      \n      <div className=\"lobby-actions\">\n        <div className=\"create-game-section\">\n          <h3>Create New Game</h3>\n          <p>Start a new game as the Defender. Your soldiers in rows 1-3 will be encrypted.</p>\n          <button \n            onClick={handleCreateGame}\n            disabled={isCreatingGame || !isContractConfigured}\n            className=\"create-game-btn\"\n          >\n            {isCreatingGame ? 'Creating...' : 'üè∞ Create Game as Defender'}\n          </button>\n        </div>\n\n        <div className=\"join-game-section\">\n          <h3>Join Existing Game</h3>\n          <p>Join a game as the Attacker. Your soldiers in rows 7-9 will be encrypted.</p>\n          <div className=\"join-game-input\">\n            <input\n              type=\"number\"\n              placeholder=\"Game ID\"\n              value={joinGameId}\n              onChange={(e) => setJoinGameId(e.target.value)}\n              min=\"1\"\n              disabled={!isContractConfigured}\n            />\n            <button \n              onClick={handleJoinGame}\n              disabled={!joinGameId || isJoiningGame || !isContractConfigured}\n              className=\"join-game-btn\"\n            >\n              {isJoiningGame ? 'Joining...' : '‚öîÔ∏è Join as Attacker'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <p>Total games created: {gameCounter}</p>\n        {isContractConfigured && (\n          <p>Contract Address: <code>{FOGWAR_CONTRACT_ADDRESS}</code></p>\n        )}\n      </div>\n\n      <div className=\"available-games\">\n        <h3>Available Games</h3>\n        <button \n          onClick={handleLoadGames} \n          className=\"refresh-btn\"\n          disabled={!isContractConfigured || isLoading}\n        >\n          {isLoading ? '‚è≥ Loading...' : 'üîÑ Refresh Games'}\n        </button>\n        \n        {availableGames.length === 0 ? (\n          <p className=\"no-games\">\n            {isContractConfigured \n              ? 'No available games found. Create a new game to start playing!' \n              : 'Configure the contract to see available games.'\n            }\n          </p>\n        ) : (\n          <div className=\"games-list\">\n            {availableGames.map((game) => (\n              <div key={game.gameId} className=\"game-card\">\n                <h4>Game #{game.gameId}</h4>\n                <p>Defender: {game.defender.slice(0, 6)}...{game.defender.slice(-4)}</p>\n                <p>Attacker: {game.attacker === '0x0000000000000000000000000000000000000000' \n                  ? 'Waiting...' \n                  : `${game.attacker.slice(0, 6)}...${game.attacker.slice(-4)}`\n                }</p>\n                <p>Status: {\n                  game.state === GameState.WaitingForPlayers ? 'Waiting for Attacker' : \n                  game.state === GameState.InProgress ? 'In Progress' : 'Finished'\n                }</p>\n                {game.state === GameState.WaitingForPlayers && game.defender !== address && (\n                  <button \n                    onClick={() => {\n                      setJoinGameId(game.gameId.toString())\n                      handleJoinGame()\n                    }}\n                    className=\"join-game-btn\"\n                    disabled={isJoiningGame}\n                  >\n                    {isJoiningGame ? 'Joining...' : 'Join Game'}\n                  </button>\n                )}\n                {(game.defender === address || game.attacker === address) && game.state === GameState.InProgress && (\n                  <button \n                    onClick={() => onGameStarted(game)}\n                    className=\"continue-game-btn\"\n                  >\n                    Continue Game\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"
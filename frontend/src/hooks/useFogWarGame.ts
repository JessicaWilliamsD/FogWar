import { useState, useEffect } from 'react'\nimport { useAccount, useWriteContract, useReadContract, useWaitForTransactionReceipt, useWatchContractEvent } from 'wagmi'\nimport { parseEventLogs } from 'viem'\nimport { FOGWAR_ABI, FOGWAR_CONTRACT_ADDRESS, GameState } from '../lib/contract'\nimport { Game } from '../App'\n\nexport function useFogWarGame() {\n  const { address } = useAccount()\n  const [currentGame, setCurrentGame] = useState<Game | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Write contracts\n  const { \n    writeContract: createGameWrite, \n    data: createGameHash,\n    isPending: isCreatingGame \n  } = useWriteContract()\n\n  const { \n    writeContract: joinGameWrite, \n    data: joinGameHash,\n    isPending: isJoiningGame \n  } = useWriteContract()\n\n  const { \n    writeContract: initSoldiersWrite, \n    data: initSoldiersHash,\n    isPending: isInitializingSoldiers \n  } = useWriteContract()\n\n  const { \n    writeContract: moveSoldierWrite, \n    data: moveSoldierHash,\n    isPending: isMovingSoldier \n  } = useWriteContract()\n\n  // Transaction receipts\n  const { \n    data: createGameReceipt,\n    isSuccess: createGameSuccess \n  } = useWaitForTransactionReceipt({\n    hash: createGameHash,\n  })\n\n  const { \n    isSuccess: joinGameSuccess \n  } = useWaitForTransactionReceipt({\n    hash: joinGameHash,\n  })\n\n  const { \n    isSuccess: initSoldiersSuccess \n  } = useWaitForTransactionReceipt({\n    hash: initSoldiersHash,\n  })\n\n  const { \n    isSuccess: moveSoldierSuccess \n  } = useWaitForTransactionReceipt({\n    hash: moveSoldierHash,\n  })\n\n  // Read game counter\n  const { data: gameCounter, refetch: refetchGameCounter } = useReadContract({\n    address: FOGWAR_CONTRACT_ADDRESS,\n    abi: FOGWAR_ABI,\n    functionName: 'gameCounter',\n  })\n\n  // Watch for events\n  useWatchContractEvent({\n    address: FOGWAR_CONTRACT_ADDRESS,\n    abi: FOGWAR_ABI,\n    eventName: 'GameCreated',\n    onLogs: (logs) => {\n      logs.forEach((log) => {\n        if (log.args.defender === address) {\n          // User created a game\n          loadGame(Number(log.args.gameId))\n        }\n      })\n    },\n  })\n\n  useWatchContractEvent({\n    address: FOGWAR_CONTRACT_ADDRESS,\n    abi: FOGWAR_ABI,\n    eventName: 'PlayerJoined',\n    onLogs: (logs) => {\n      logs.forEach((log) => {\n        if (currentGame && Number(log.args.gameId) === currentGame.gameId) {\n          // Someone joined the current game\n          loadGame(currentGame.gameId)\n        }\n      })\n    },\n  })\n\n  useWatchContractEvent({\n    address: FOGWAR_CONTRACT_ADDRESS,\n    abi: FOGWAR_ABI,\n    eventName: 'SoldierMoved',\n    onLogs: (logs) => {\n      logs.forEach((log) => {\n        if (currentGame && Number(log.args.gameId) === currentGame.gameId) {\n          // Someone moved in the current game\n          loadGame(currentGame.gameId)\n        }\n      })\n    },\n  })\n\n  // Load game data\n  const loadGame = async (gameId: number) => {\n    if (!gameId) return\n    \n    try {\n      setIsLoading(true)\n      setError(null)\n      \n      const gameData = await readContract({\n        address: FOGWAR_CONTRACT_ADDRESS,\n        abi: FOGWAR_ABI,\n        functionName: 'getGame',\n        args: [BigInt(gameId)],\n      }) as any\n      \n      const game: Game = {\n        gameId: Number(gameData.gameId),\n        defender: gameData.defender,\n        attacker: gameData.attacker,\n        currentPlayer: gameData.currentPlayer,\n        state: Number(gameData.state),\n      }\n      \n      setCurrentGame(game)\n    } catch (err) {\n      console.error('Error loading game:', err)\n      setError('Failed to load game data')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Game actions\n  const createGame = async () => {\n    try {\n      setError(null)\n      createGameWrite({\n        address: FOGWAR_CONTRACT_ADDRESS,\n        abi: FOGWAR_ABI,\n        functionName: 'createGame',\n      })\n    } catch (err) {\n      console.error('Error creating game:', err)\n      setError('Failed to create game')\n    }\n  }\n\n  const joinGame = async (gameId: number) => {\n    try {\n      setError(null)\n      joinGameWrite({\n        address: FOGWAR_CONTRACT_ADDRESS,\n        abi: FOGWAR_ABI,\n        functionName: 'joinGame',\n        args: [BigInt(gameId)],\n      })\n    } catch (err) {\n      console.error('Error joining game:', err)\n      setError('Failed to join game')\n    }\n  }\n\n  const initializeSoldiers = async (gameId: number, positions: {x: number, y: number}[]) => {\n    if (positions.length !== 3) {\n      setError('Must provide exactly 3 soldier positions')\n      return\n    }\n    \n    try {\n      setError(null)\n      const xPositions = positions.map(p => p.x) as [number, number, number]\n      const yPositions = positions.map(p => p.y) as [number, number, number]\n      \n      initSoldiersWrite({\n        address: FOGWAR_CONTRACT_ADDRESS,\n        abi: FOGWAR_ABI,\n        functionName: 'initializeSoldiers',\n        args: [BigInt(gameId), xPositions, yPositions],\n      })\n    } catch (err) {\n      console.error('Error initializing soldiers:', err)\n      setError('Failed to initialize soldiers')\n    }\n  }\n\n  const moveSoldier = async (gameId: number, soldierIndex: number, newX: number, newY: number) => {\n    try {\n      setError(null)\n      moveSoldierWrite({\n        address: FOGWAR_CONTRACT_ADDRESS,\n        abi: FOGWAR_ABI,\n        functionName: 'moveSoldierPlaintext',\n        args: [BigInt(gameId), soldierIndex, newX, newY],\n      })\n    } catch (err) {\n      console.error('Error moving soldier:', err)\n      setError('Failed to move soldier')\n    }\n  }\n\n  // Load available games\n  const loadAvailableGames = async (): Promise<Game[]> => {\n    if (!gameCounter) return []\n    \n    const games: Game[] = []\n    \n    try {\n      for (let i = 1; i <= Number(gameCounter); i++) {\n        const gameData = await readContract({\n          address: FOGWAR_CONTRACT_ADDRESS,\n          abi: FOGWAR_ABI,\n          functionName: 'getGame',\n          args: [BigInt(i)],\n        }) as any\n        \n        if (gameData.defender !== '0x0000000000000000000000000000000000000000') {\n          games.push({\n            gameId: Number(gameData.gameId),\n            defender: gameData.defender,\n            attacker: gameData.attacker,\n            currentPlayer: gameData.currentPlayer,\n            state: Number(gameData.state),\n          })\n        }\n      }\n    } catch (err) {\n      console.error('Error loading available games:', err)\n    }\n    \n    return games\n  }\n\n  // Extract game ID from create game receipt\n  useEffect(() => {\n    if (createGameSuccess && createGameReceipt) {\n      try {\n        const logs = parseEventLogs({\n          abi: FOGWAR_ABI,\n          logs: createGameReceipt.logs,\n        })\n        \n        const gameCreatedEvent = logs.find(log => log.eventName === 'GameCreated')\n        if (gameCreatedEvent && 'args' in gameCreatedEvent) {\n          const gameId = Number(gameCreatedEvent.args.gameId)\n          loadGame(gameId)\n        }\n      } catch (err) {\n        console.error('Error parsing game created event:', err)\n      }\n    }\n  }, [createGameSuccess, createGameReceipt])\n\n  // Reload game after successful actions\n  useEffect(() => {\n    if (joinGameSuccess && currentGame) {\n      loadGame(currentGame.gameId)\n    }\n  }, [joinGameSuccess])\n\n  useEffect(() => {\n    if (initSoldiersSuccess && currentGame) {\n      loadGame(currentGame.gameId)\n    }\n  }, [initSoldiersSuccess])\n\n  useEffect(() => {\n    if (moveSoldierSuccess && currentGame) {\n      loadGame(currentGame.gameId)\n    }\n  }, [moveSoldierSuccess])\n\n  return {\n    // State\n    currentGame,\n    isLoading,\n    error,\n    gameCounter: gameCounter ? Number(gameCounter) : 0,\n    \n    // Loading states\n    isCreatingGame,\n    isJoiningGame,\n    isInitializingSoldiers,\n    isMovingSoldier,\n    \n    // Actions\n    createGame,\n    joinGame,\n    loadGame,\n    loadAvailableGames,\n    initializeSoldiers,\n    moveSoldier,\n    refetchGameCounter,\n    \n    // Utilities\n    setCurrentGame,\n    setError,\n  }\n}\n\n// Helper function to read contract (will be replaced by wagmi hook in production)\nasync function readContract(config: any) {\n  // This is a placeholder - in a real app you'd use wagmi's readContract\n  // For now, return mock data to prevent errors\n  throw new Error('Contract reading not implemented - replace with actual deployment')\n}"
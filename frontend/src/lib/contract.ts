// FogWar contract ABI and utilities\nexport const FOGWAR_ABI = [\n  {\n    inputs: [],\n    name: 'createGame',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'gameId', type: 'uint256' }],\n    name: 'joinGame',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { internalType: 'uint8[3]', name: 'xPositions', type: 'uint8[3]' },\n      { internalType: 'uint8[3]', name: 'yPositions', type: 'uint8[3]' },\n    ],\n    name: 'initializeSoldiers',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { internalType: 'uint8', name: 'soldierIndex', type: 'uint8' },\n      { internalType: 'uint8', name: 'newX', type: 'uint8' },\n      { internalType: 'uint8', name: 'newY', type: 'uint8' },\n    ],\n    name: 'moveSoldierPlaintext',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'gameId', type: 'uint256' }],\n    name: 'getGame',\n    outputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'defender', type: 'address' },\n          { internalType: 'address', name: 'attacker', type: 'address' },\n          { internalType: 'address', name: 'currentPlayer', type: 'address' },\n          { internalType: 'enum FogWar.GameState', name: 'state', type: 'uint8' },\n          { internalType: 'uint256', name: 'gameId', type: 'uint256' },\n        ],\n        internalType: 'struct FogWar.Game',\n        name: '',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { internalType: 'address', name: 'player', type: 'address' },\n      { internalType: 'uint8', name: 'soldierIndex', type: 'uint8' },\n    ],\n    name: 'getSoldier',\n    outputs: [\n      {\n        components: [\n          { internalType: 'uint8', name: 'x', type: 'uint8' },\n          { internalType: 'uint8', name: 'y', type: 'uint8' },\n          { internalType: 'bool', name: 'isAlive', type: 'bool' },\n          { internalType: 'bool', name: 'isEncrypted', type: 'bool' },\n        ],\n        internalType: 'struct FogWar.Soldier',\n        name: '',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { internalType: 'uint8', name: 'x', type: 'uint8' },\n      { internalType: 'uint8', name: 'y', type: 'uint8' },\n    ],\n    name: 'isPositionOccupied',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'gameCounter',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { indexed: true, internalType: 'address', name: 'defender', type: 'address' },\n    ],\n    name: 'GameCreated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { indexed: true, internalType: 'address', name: 'attacker', type: 'address' },\n    ],\n    name: 'PlayerJoined',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'uint256', name: 'gameId', type: 'uint256' },\n    ],\n    name: 'GameStarted',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'uint256', name: 'gameId', type: 'uint256' },\n      { indexed: true, internalType: 'address', name: 'player', type: 'address' },\n      { indexed: false, internalType: 'uint8', name: 'soldierIndex', type: 'uint8' },\n      { indexed: false, internalType: 'uint8', name: 'newX', type: 'uint8' },\n      { indexed: false, internalType: 'uint8', name: 'newY', type: 'uint8' },\n    ],\n    name: 'SoldierMoved',\n    type: 'event',\n  },\n] as const\n\n// Replace with your deployed contract address\n// For development, you can use a placeholder or environment variable\nexport const FOGWAR_CONTRACT_ADDRESS = \n  (import.meta.env.VITE_FOGWAR_CONTRACT_ADDRESS as `0x${string}`) || \n  '0x0000000000000000000000000000000000000000' as `0x${string}`\n\n// Game state enum\nexport enum GameState {\n  WaitingForPlayers = 0,\n  InProgress = 1,\n  Finished = 2,\n}\n\n// Player type enum\nexport enum PlayerType {\n  None = 0,\n  Defender = 1,\n  Attacker = 2,\n}\n\n// Utility functions\nexport const isInDefenderHome = (y: number): boolean => {\n  return y >= 1 && y <= 3\n}\n\nexport const isInAttackerHome = (y: number): boolean => {\n  return y >= 7 && y <= 9\n}\n\nexport const isInNeutralZone = (y: number): boolean => {\n  return y >= 4 && y <= 6\n}\n\nexport const getTerritoryType = (y: number): 'defender' | 'neutral' | 'attacker' => {\n  if (isInDefenderHome(y)) return 'defender'\n  if (isInAttackerHome(y)) return 'attacker'\n  return 'neutral'\n}\n\nexport const isValidPosition = (x: number, y: number): boolean => {\n  return x >= 1 && x <= 9 && y >= 1 && y <= 9\n}\n\nexport const isValidMove = (fromX: number, fromY: number, toX: number, toY: number): boolean => {\n  if (!isValidPosition(fromX, fromY) || !isValidPosition(toX, toY)) {\n    return false\n  }\n  \n  const deltaX = Math.abs(toX - fromX)\n  const deltaY = Math.abs(toY - fromY)\n  \n  // Can move to adjacent squares (including diagonals)\n  return deltaX <= 1 && deltaY <= 1 && !(deltaX === 0 && deltaY === 0)\n}"